!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CYCLEFILL_H	cyclefill.h	2;"	d
CYCLE_H	cycle.h	2;"	d
Cycle	cycle.h	/^    Cycle();$/;"	p	class:Cycle	access:public	signature:()
Cycle	cycle.h	/^class Cycle : public Step$/;"	c	inherits:Step
Cycle::Cycle	cycle.h	/^    Cycle();$/;"	p	class:Cycle	access:public	signature:()
Cycle::length	cycle.h	/^    int length;$/;"	m	class:Cycle	access:private
Cycle::run	cycle.h	/^    void run(Graph) const;$/;"	p	class:Cycle	access:public	signature:(Graph) const
Cycle::setLength	cycle.h	/^    void setLength(int);$/;"	p	class:Cycle	access:public	signature:(int)
CycleFill	cyclefill.h	/^    CycleFill();$/;"	p	class:CycleFill	access:public	signature:()
CycleFill	cyclefill.h	/^class CycleFill : public Step$/;"	c	inherits:Step
CycleFill::CycleFill	cyclefill.h	/^    CycleFill();$/;"	p	class:CycleFill	access:public	signature:()
CycleFill::lengths	cyclefill.h	/^    std::vector<int> lengths;$/;"	m	class:CycleFill	access:private
CycleFill::run	cyclefill.h	/^    void run(Graph) const;$/;"	p	class:CycleFill	access:public	signature:(Graph) const
CycleFill::setLengths	cyclefill.h	/^    void setLengths(int []);$/;"	p	class:CycleFill	access:public	signature:(int [])
EDGE_H	edge.h	2;"	d
Edge	edge.cpp	/^Edge::Edge(int[] v)$/;"	f	class:Edge	signature:(int[] v)
Edge	edge.h	/^    Edge(int, int);$/;"	p	class:Edge	access:public	signature:(int, int)
Edge	edge.h	/^class Edge$/;"	c
Edge::Edge	edge.cpp	/^Edge::Edge(int[] v)$/;"	f	class:Edge	signature:(int[] v)
Edge::Edge	edge.h	/^    Edge(int, int);$/;"	p	class:Edge	access:public	signature:(int, int)
Edge::colour	edge.h	/^    int colour;$/;"	m	class:Edge	access:public
Edge::other	edge.cpp	/^int Edge::other(int v) const$/;"	f	class:Edge	signature:(int v) const
Edge::other	edge.h	/^    int other(int) const;$/;"	p	class:Edge	access:public	signature:(int) const
Edge::toString	edge.cpp	/^std::string Edge::toString() const$/;"	f	class:Edge	signature:() const
Edge::touches	edge.cpp	/^int Edge::touches(int v) const$/;"	f	class:Edge	signature:(int v) const
Edge::touches	edge.h	/^    bool touches(int) const;$/;"	p	class:Edge	access:public	signature:(int) const
Edge::v	edge.h	/^    int v[2];$/;"	m	class:Edge	access:private
GRAPH_H	graph.h	2;"	d
Graph	graph.cpp	/^Graph::Graph()$/;"	f	class:Graph	signature:()
Graph	graph.h	/^    Graph();$/;"	p	class:Graph	access:public	signature:()
Graph	graph.h	/^class Graph$/;"	c
Graph::Graph	graph.cpp	/^Graph::Graph()$/;"	f	class:Graph	signature:()
Graph::Graph	graph.h	/^    Graph();$/;"	p	class:Graph	access:public	signature:()
Graph::checkpoint	graph.h	/^    int[] checkpoint;$/;"	m	class:Graph	access:public
Graph::done	graph.h	/^    bool done;$/;"	m	class:Graph	access:public
Graph::edgeLists	graph.h	/^    std::vector<std::vector<Edge *>> edgeLists;$/;"	m	class:Graph	access:public
Graph::rampTo	graph.h	/^    int[] rampTo;$/;"	m	class:Graph	access:public
Graph::rampingUp	graph.h	/^    bool rampingUp;$/;"	m	class:Graph	access:public
Graph::steps	graph.h	/^    std::vector<Step *> steps;$/;"	m	class:Graph	access:public
PATHITERATOR_H	pathiterator.h	2;"	d
PATH_H	path.h	2;"	d
Path	path.h	/^    Path();$/;"	p	class:Path	access:public	signature:()
Path	path.h	/^class Path : public Step$/;"	c	inherits:Step
Path::Path	path.h	/^    Path();$/;"	p	class:Path	access:public	signature:()
Path::length	path.h	/^    int length;$/;"	m	class:Path	access:private
Path::run	path.h	/^    void run(Graph) const;$/;"	p	class:Path	access:public	signature:(Graph) const
Path::setLength	path.h	/^    void setLength(int);$/;"	p	class:Path	access:public	signature:(int)
PathIterator	pathiterator.cpp	/^PathIterator::PathIterator(const Graph &g, int v, int l)$/;"	f	class:PathIterator	signature:(const Graph &g, int v, int l)
PathIterator	pathiterator.h	/^    PathIterator(Graph, int);$/;"	p	class:PathIterator	access:public	signature:(Graph, int)
PathIterator	pathiterator.h	/^class PathIterator$/;"	c
PathIterator::PathIterator	pathiterator.cpp	/^PathIterator::PathIterator(const Graph &g, int v, int l)$/;"	f	class:PathIterator	signature:(const Graph &g, int v, int l)
PathIterator::PathIterator	pathiterator.h	/^    PathIterator(Graph, int);$/;"	p	class:PathIterator	access:public	signature:(Graph, int)
PathIterator::graph	pathiterator.h	/^    Graph graph;$/;"	m	class:PathIterator	access:private
PathIterator::hasNext	pathiterator.cpp	/^bool PathIterator::hasNext() const$/;"	f	class:PathIterator	signature:() const
PathIterator::hasNext	pathiterator.h	/^    bool hasNext() const;$/;"	p	class:PathIterator	access:public	signature:() const
PathIterator::length	pathiterator.h	/^    int length;$/;"	m	class:PathIterator	access:private
PathIterator::next	pathiterator.h	/^    std::vector<Edge *> next();$/;"	p	class:PathIterator	access:public	signature:()
STEP_H	step.h	2;"	d
Step	step.cpp	/^Step::Step()$/;"	f	class:Step	signature:()
Step	step.h	/^    Step();$/;"	p	class:Step	access:public	signature:()
Step	step.h	/^class Step$/;"	c
Step::Step	step.cpp	/^Step::Step()$/;"	f	class:Step	signature:()
Step::Step	step.h	/^    Step();$/;"	p	class:Step	access:public	signature:()
Step::avoid	step.cpp	/^void Step::avoid(int count, int[] a)$/;"	f	class:Step	signature:(int count, int[] a)
Step::avoid	step.h	/^    void avoid(int[]);$/;"	p	class:Step	access:public	signature:(int[])
Step::colour	step.h	/^    int colour;$/;"	m	class:Step	access:private
Step::run	step.h	/^    virtual void run(Graph) const;$/;"	p	class:Step	access:public	signature:(Graph) const
Step::setColour	step.cpp	/^void Step::setColour(int c)$/;"	f	class:Step	signature:(int c)
Step::setColour	step.h	/^    void setColour(int);$/;"	p	class:Step	access:public	signature:(int)
Step::toAvoid	step.h	/^    std::set<int> toAvoid;$/;"	m	class:Step	access:private
avoid	step.cpp	/^void Step::avoid(int count, int[] a)$/;"	f	class:Step	signature:(int count, int[] a)
avoid	step.h	/^    void avoid(int[]);$/;"	p	class:Step	access:public	signature:(int[])
checkpoint	graph.h	/^    int[] checkpoint;$/;"	m	class:Graph	access:public
colour	edge.h	/^    int colour;$/;"	m	class:Edge	access:public
colour	step.h	/^    int colour;$/;"	m	class:Step	access:private
done	graph.h	/^    bool done;$/;"	m	class:Graph	access:public
edgeLists	graph.h	/^    std::vector<std::vector<Edge *>> edgeLists;$/;"	m	class:Graph	access:public
graph	pathiterator.h	/^    Graph graph;$/;"	m	class:PathIterator	access:private
hasNext	pathiterator.cpp	/^bool PathIterator::hasNext() const$/;"	f	class:PathIterator	signature:() const
hasNext	pathiterator.h	/^    bool hasNext() const;$/;"	p	class:PathIterator	access:public	signature:() const
length	cycle.h	/^    int length;$/;"	m	class:Cycle	access:private
length	path.h	/^    int length;$/;"	m	class:Path	access:private
length	pathiterator.h	/^    int length;$/;"	m	class:PathIterator	access:private
lengths	cyclefill.h	/^    std::vector<int> lengths;$/;"	m	class:CycleFill	access:private
next	pathiterator.h	/^    std::vector<Edge *> next();$/;"	p	class:PathIterator	access:public	signature:()
other	edge.cpp	/^int Edge::other(int v) const$/;"	f	class:Edge	signature:(int v) const
other	edge.h	/^    int other(int) const;$/;"	p	class:Edge	access:public	signature:(int) const
rampTo	graph.h	/^    int[] rampTo;$/;"	m	class:Graph	access:public
rampingUp	graph.h	/^    bool rampingUp;$/;"	m	class:Graph	access:public
run	cycle.h	/^    void run(Graph) const;$/;"	p	class:Cycle	access:public	signature:(Graph) const
run	cyclefill.h	/^    void run(Graph) const;$/;"	p	class:CycleFill	access:public	signature:(Graph) const
run	path.h	/^    void run(Graph) const;$/;"	p	class:Path	access:public	signature:(Graph) const
run	step.h	/^    virtual void run(Graph) const;$/;"	p	class:Step	access:public	signature:(Graph) const
setColour	step.cpp	/^void Step::setColour(int c)$/;"	f	class:Step	signature:(int c)
setColour	step.h	/^    void setColour(int);$/;"	p	class:Step	access:public	signature:(int)
setLength	cycle.h	/^    void setLength(int);$/;"	p	class:Cycle	access:public	signature:(int)
setLength	path.h	/^    void setLength(int);$/;"	p	class:Path	access:public	signature:(int)
setLengths	cyclefill.h	/^    void setLengths(int []);$/;"	p	class:CycleFill	access:public	signature:(int [])
steps	graph.h	/^    std::vector<Step *> steps;$/;"	m	class:Graph	access:public
toAvoid	step.h	/^    std::set<int> toAvoid;$/;"	m	class:Step	access:private
toString	edge.cpp	/^std::string Edge::toString() const$/;"	f	class:Edge	signature:() const
touches	edge.cpp	/^int Edge::touches(int v) const$/;"	f	class:Edge	signature:(int v) const
touches	edge.h	/^    bool touches(int) const;$/;"	p	class:Edge	access:public	signature:(int) const
v	edge.h	/^    int v[2];$/;"	m	class:Edge	access:private
